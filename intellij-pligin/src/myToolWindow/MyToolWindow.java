package myToolWindow;

import com.intellij.openapi.wm.ToolWindow;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;

public class MyToolWindow {
	private JButton refreshToolWindowButton;
	private JButton hideToolWindowButton;
	private JLabel currentDate;
	private JLabel currentTime;
	private JLabel timeZone;
	private JPanel myToolWindowContent;

	public MyToolWindow(ToolWindow toolWindow) {
		hideToolWindowButton.addActionListener(e -> toolWindow.hide(null));
		refreshToolWindowButton.addActionListener(e -> currentDateTime());

		this.currentDateTime();
	}

	public void currentDateTime() {
		// Get current date and time
		Calendar instance = Calendar.getInstance();
		currentDate.setText(String.valueOf(instance.get(Calendar.DAY_OF_MONTH)) + "/"
			+ String.valueOf(instance.get(Calendar.MONTH) + 1) + "/" +
			String.valueOf(instance.get(Calendar.YEAR)));
		currentDate.setIcon(new ImageIcon(getClass().getResource("/myToolWindow/Calendar-icon.png")));
		int min = instance.get(Calendar.MINUTE);
		String strMin;
		if (min < 10) {
			strMin = "0" + String.valueOf(min);
		} else {
			strMin = String.valueOf(min);
		}
		currentTime.setText(instance.get(Calendar.HOUR_OF_DAY) + ":" + strMin);
		currentTime.setIcon(new ImageIcon(getClass().getResource("/myToolWindow/Time-icon.png")));
		// Get time zone
		long gmt_Offset = instance.get(Calendar.ZONE_OFFSET); // offset from GMT in milliseconds
		String str_gmt_Offset = String.valueOf(gmt_Offset / 3600000);
		str_gmt_Offset = (gmt_Offset > 0) ? "GMT + " + str_gmt_Offset : "GMT - " + str_gmt_Offset;
		timeZone.setText(str_gmt_Offset);
		timeZone.setIcon(new ImageIcon(getClass().getResource("/myToolWindow/Time-zone-icon.png")));

	}

	public JPanel getContent() {
		return myToolWindowContent;
	}

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/** Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		myToolWindowContent = new JPanel();
		myToolWindowContent.setLayout(new GridLayoutManager(2, 5, new Insets(0, 0, 0, 0), -1, -1));
		currentDate = new JLabel();
		currentDate.setText("Date");
		myToolWindowContent.add(currentDate,
			new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		timeZone = new JLabel();
		timeZone.setText("TimeZone");
		myToolWindowContent.add(timeZone,
			new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		currentTime = new JLabel();
		currentTime.setText("Time");
		myToolWindowContent.add(currentTime,
			new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		refreshToolWindowButton = new JButton();
		refreshToolWindowButton.setText("Refresh");
		myToolWindowContent.add(refreshToolWindowButton,
			new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		hideToolWindowButton = new JButton();
		hideToolWindowButton.setText("Hide");
		myToolWindowContent.add(hideToolWindowButton,
			new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		myToolWindowContent.add(spacer1,
			new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		myToolWindowContent.add(spacer2,
			new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
	}

	/** @noinspection ALL */
	public JComponent $$$getRootComponent$$$() {
		return myToolWindowContent;
	}
}
